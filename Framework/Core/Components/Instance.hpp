#pragma once
#include <Defines.hpp>
#include <vector>
#include <Components/InlineComponent.hpp>
#include <Components/TitlebarComponent.hpp>
#include <Components/WindowComponent.hpp>
#include <imgui.h>
#include <imgui_internal.h>
#include <Global.hpp>

namespace UImGui
{
    /**
     * @brief A struct that defines initialization information for the framework, instantiated automatically in the Instance
     * @var inlineComponents - A list of inline component base class pointers
     * @var titlebarComponents - A list of titlebar component base class pointers
     * @var windowComponents - A list of window component base class pointers
     * @var globalData - A void pointer that points to a global data struct defined by the user to be accessed at whatever
     * location it is needed
     */
    struct UIMGUI_PUBLIC_API InitInfo
    {
        std::vector<InlineComponent*> inlineComponents;
        std::vector<TitlebarComponent*> titlebarComponents;
        std::vector<WindowComponent*> windowComponents;

        // Provide a global data struct to be shared with all components
        void* globalData = nullptr;
    };

    /**
     * @brief The base applicatino instance class
     * @implements Instance - Constructs the instance, called at the beginning of the autogenerated main.cpp
     * @implements begin - The default begin event as detailed in the docs
     * @implements tick - The default tick event as detailed in the docs
     * @implements end - The default end event as detailed in the docs
     * @implements ~Instance - Destructs the instance, called when the program closes
     * @implements onEventConfigureStyle - A function called when the style of the different UI widgets needs to be configured
     * @static getGlobal - Returns the global data struct void pointer defined in the init info struct
     * @static getComponentByIDs - Given the name and the numeric ID of a component, as well as its type(a member of the ComponentType) as a template argument it returns a pointer to the given component if found, if not it returns a nullptr and an error
     * @static cast - Given a template parameter of an instance subclass type, it casts the current internal instance pointer to the pointer type provided and returns it
     * @var initInfo - The initInfo struct
     * @implements beginAutohandle - Used to automatically handle downstream begin events
     * @implements tickAutohandle - Used to automatically handle downstream tick events
     * @implements endAutohandle - Used to automatically handle downstream end events
     */
    class UIMGUI_PUBLIC_API Instance
    {
    public:
        Instance() noexcept;
        virtual void begin() = 0;
        virtual void tick(float deltaTime) = 0;
        virtual void end() = 0;
        virtual ~Instance() noexcept;

        /**
         * @brief A function called at the initialization of the application when the style for the different UI widgets
         * needs to be configured
         * @param style - A reference to the internal ImGuiStyle variable that holds all style data for every ImGui widget
         * @param io - A refrerence to the internal ImGuiIO variable that holds all IO data for ImGui
         */
        virtual void onEventConfigureStyle(ImGuiStyle& style, ImGuiIO& io) = 0;
        // Returns the global void* defined in the beginInfo struct
        static void* getGlobal() noexcept;

        /**
         * @brief Given the IDs below returns a component if it is found in the initInfo's lists or nullptr if it is not found
         * @tparam cmpType - Provides constexpr type information to know for which type of component to search for
         * @param name - The name of the component we're looking for
         * @param id - The numeric ID of the component we're looking for
         * @return A pointer to the component if found, or nullptr. Type depends on the provided ComponentType template parameter enum
         */
        template<ComponentType cmpType>
        static auto* getComponentByIDs(const FString& name, uint64_t id)
        {
            if constexpr (cmpType == UIMGUI_COMPONENT_TYPE_INLINE)
            {
                for (auto& a : internalGlobal.instance->initInfo.inlineComponents)
                    if (a->name == name && a->id == id)
                        return a;
            }
            else if constexpr (cmpType == UIMGUI_COMPONENT_TYPE_TITLEBAR)
            {
                for (auto& a : internalGlobal.instance->initInfo.titlebarComponents)
                    if (a->name == name && a->id == id)
                        return a;
            }
            else if constexpr (cmpType == UIMGUI_COMPONENT_TYPE_WINDOW)
            {
                for (auto& a : internalGlobal.instance->initInfo.windowComponents)
                    if (a->name == name && a->id == id)
                        return a;
            }
            else
            {
                Logger::log("Invalid UI component type provided for the getComponentByIDs function!", UVK_LOG_TYPE_ERROR);
                return nullptr;
            }
        }

        /**
         * @brief Casts the active instance struct to a subclass of it
         * @tparam T - The type of the subclass
         * @return The pointer of the active instance casted from Instance* to T*
         */
        template<typename T>
        static T* cast()
        {
            return static_cast<T*>(internalGlobal.instance);
        }

        /**
         * @brief Provides initialization information for the framework
         */
        InitInfo initInfo;

        /**
         * @brief Used to automatically handle downstream begin events
         */
        void beginAutohandle() noexcept;
        /**
         * @brief Used to automatically handle downstream tick events
         * @param deltaTime - the delta time calculated in the application's render loop
         */
        void tickAutohandle(float deltaTime) noexcept;
        /**
         * @brief Used to automatically handle downstream end events
         */
        void endAutohandle() noexcept;

        // Closes the application
        static void shutdown() noexcept;

        std::vector<FString> arguments;
    private:

    };
}